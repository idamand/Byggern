
TestProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00000d88  00000e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800298  00800298  00000fb4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f7  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9d  00000000  00000000  0000267b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000867  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00003980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000610  00000000  00000000  00003bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007eb  00000000  00000000  00004204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000049ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e8       	ldi	r30, 0x88	; 136
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 39       	cpi	r26, 0x98	; 152
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a8 e9       	ldi	r26, 0x98	; 152
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 3a       	cpi	r26, 0xA3	; 163
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:


int main(void){

	//initialize uart and check that communication works	
	USART_Init(MYUBRR); 
  ae:	8f e1       	ldi	r24, 0x1F	; 31
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 16 02 	call	0x42c	; 0x42c <USART_Init>
	fdevopen(USART_TRANSMIT,USART_Receive);
  b6:	61 e2       	ldi	r22, 0x21	; 33
  b8:	72 e0       	ldi	r23, 0x02	; 2
  ba:	8d e1       	ldi	r24, 0x1D	; 29
  bc:	92 e0       	ldi	r25, 0x02	; 2
  be:	0e 94 25 02 	call	0x44a	; 0x44a <fdevopen>
	
	
	
	// do setup for the external adress interface
	DDRC |= (1<<PC3); //force the MSB of the adress bus to be a write pin 
  c2:	a3 9a       	sbi	0x14, 3	; 20
	MCUCR |= (1<<SRE); // enable external adress memory interface
  c4:	85 b7       	in	r24, 0x35	; 53
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); // release top ports of adress space for jtag (pc4-pc7)
  ca:	80 b7       	in	r24, 0x30	; 48
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM1); // release top ports of adress space for jtag (pc4-pc7)
  d0:	80 b7       	in	r24, 0x30	; 48
  d2:	8f 7e       	andi	r24, 0xEF	; 239
  d4:	80 bf       	out	0x30, r24	; 48
	SFIOR &= ~(1<<XMM0); // release top ports of adress space for jtag (pc4-pc7)
  d6:	80 b7       	in	r24, 0x30	; 48
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	80 bf       	out	0x30, r24	; 48
	
	//adc_setup();
	
	
	
    oled_init();
  dc:	0e 94 31 01 	call	0x262	; 0x262 <oled_init>
	//fdevopen(oled_print_char,USART_Receive);
	
	oled_clear_screen(); 
  e0:	0e 94 ca 01 	call	0x394	; 0x394 <oled_clear_screen>
	printf("program started"); oled_newline(); 
  e4:	8a e0       	ldi	r24, 0x0A	; 10
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>
  f0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <oled_newline>
	
	SPI_MasterInit();
  f4:	0e 94 07 02 	call	0x40e	; 0x40e <SPI_MasterInit>
	//mcp2515_reset();
	
	uint8_t can_ctrl_reg_addr = 0x0f;
	uint8_t can_ctrl_content =  mcp2515_read(can_ctrl_reg_addr);
  f8:	8f e0       	ldi	r24, 0x0F	; 15
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 c5 00 	call	0x18a	; 0x18a <mcp2515_read>
	printf("the initial content of canctrl is %4d: \r\n", can_ctrl_content);
 100:	99 27       	eor	r25, r25
 102:	9f 93       	push	r25
 104:	8f 93       	push	r24
 106:	8a e1       	ldi	r24, 0x1A	; 26
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	9f 93       	push	r25
 10c:	8f 93       	push	r24
 10e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>

	mcp2515_set_loopback_mode();
 112:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <mcp2515_set_loopback_mode>

	
	printf("doing test of loading bufs");
 116:	84 e4       	ldi	r24, 0x44	; 68
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	9f 93       	push	r25
 11c:	8f 93       	push	r24
 11e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>
	mcp2515_load_tx_buffer(0x05); // just arbitrary number
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <mcp2515_load_tx_buffer>
	uint8_t recieved1 = mcp2515_read_rx_buffer();
 12a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <mcp2515_read_rx_buffer>
	printf("reading rx buffer yields: %4d: \r\n", recieved1);
 12e:	99 27       	eor	r25, r25
 130:	9f 93       	push	r25
 132:	8f 93       	push	r24
 134:	8f e5       	ldi	r24, 0x5F	; 95
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>

	printf("program finished"); oled_newline();
 140:	81 e8       	ldi	r24, 0x81	; 129
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24
 148:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>
 14c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <oled_newline>
 150:	8d b7       	in	r24, 0x3d	; 61
 152:	9e b7       	in	r25, 0x3e	; 62
 154:	0e 96       	adiw	r24, 0x0e	; 14
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	9e bf       	out	0x3e, r25	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	8d bf       	out	0x3d, r24	; 61
	}
	
	*/
	
	return 0;
}
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret

00000166 <mcp2515_write>:
	PORTB |= (1<<SPI_SLAVE_SELECT_PIN);
	return return_value;
}

void mcp2515_reset(){
	SPI_MasterTransmit(MCP_RESET_INSTRUCTION); // transmit reset instruction 
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	d8 2f       	mov	r29, r24
 16c:	c6 2f       	mov	r28, r22
 16e:	c4 98       	cbi	0x18, 4	; 24
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 0c 02 	call	0x418	; 0x418 <SPI_MasterTransmit>
 176:	8d 2f       	mov	r24, r29
 178:	0e 94 0c 02 	call	0x418	; 0x418 <SPI_MasterTransmit>
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 0c 02 	call	0x418	; 0x418 <SPI_MasterTransmit>
 182:	c4 9a       	sbi	0x18, 4	; 24
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <mcp2515_read>:
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
 18e:	c4 98       	cbi	0x18, 4	; 24
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	0e 94 0c 02 	call	0x418	; 0x418 <SPI_MasterTransmit>
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 0c 02 	call	0x418	; 0x418 <SPI_MasterTransmit>
 19c:	0e 94 10 02 	call	0x420	; 0x420 <SPI_MasterRead>
 1a0:	c4 9a       	sbi	0x18, 4	; 24
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <mcp2515_load_tx_buffer>:
}

void mcp2515_load_tx_buffer(uint8_t data){
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
	uint8_t buf_num = 0x00; //can be a number between 0b0000 and 0b0111 see datasheet p.68
	SPI_MasterTransmit(MCP_LOAD_TX_INSTRUCTION|buf_num); //tx load buffer
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	0e 94 0c 02 	call	0x418	; 0x418 <SPI_MasterTransmit>
	SPI_MasterTransmit(data); 
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 0c 02 	call	0x418	; 0x418 <SPI_MasterTransmit>
}
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <mcp2515_read_rx_buffer>:

uint8_t mcp2515_read_rx_buffer(){
	uint8_t buf_num = 0x00;
	SPI_MasterTransmit(MCP_READ_RX_INSTRUCTION|(buf_num<<1)); // Bitshift because format for instruction is 0b10010nm0
 1ba:	80 e9       	ldi	r24, 0x90	; 144
 1bc:	0e 94 0c 02 	call	0x418	; 0x418 <SPI_MasterTransmit>
	return SPI_MasterRead();
 1c0:	0e 94 10 02 	call	0x420	; 0x420 <SPI_MasterRead>
}
 1c4:	08 95       	ret

000001c6 <mcp2515_set_loopback_mode>:

void mcp2515_set_loopback_mode(){
 1c6:	cf 93       	push	r28
	 //can_ctrl_reg 0xfh, REQP (bit 7-5 of can ctrl reg, 5 is lsb)
	uint8_t can_ctrl_reg_addr = 0x0f;
	
	printf("in setting loopback\r\n");
 1c8:	82 e9       	ldi	r24, 0x92	; 146
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 86 02 	call	0x50c	; 0x50c <puts>

	uint8_t can_ctrl_content = 8; //arbitrary start value
	can_ctrl_content =  mcp2515_read(can_ctrl_reg_addr);
 1d0:	8f e0       	ldi	r24, 0x0F	; 15
 1d2:	0e 94 c5 00 	call	0x18a	; 0x18a <mcp2515_read>
 1d6:	c8 2f       	mov	r28, r24
	printf("the initial loopback content of canctrl is %4d: \r\n", can_ctrl_content);
 1d8:	1f 92       	push	r1
 1da:	8f 93       	push	r24
 1dc:	87 ea       	ldi	r24, 0xA7	; 167
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	9f 93       	push	r25
 1e2:	8f 93       	push	r24
 1e4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>
	

	// loopback mode (p.60 mcp datasheet) is reqp = 010 (that is we set the uppermost three bits to 101
	uint8_t loopback_command = can_ctrl_content | (1<<6);
	loopback_command &= 0b01011111;
 1e8:	cf 75       	andi	r28, 0x5F	; 95
 1ea:	c0 64       	ori	r28, 0x40	; 64
	printf("the new loopback to be written to canctrl is %4d: \r\n", loopback_command);
 1ec:	1f 92       	push	r1
 1ee:	cf 93       	push	r28
 1f0:	8a ed       	ldi	r24, 0xDA	; 218
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	9f 93       	push	r25
 1f6:	8f 93       	push	r24
 1f8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>

	mcp2515_write(can_ctrl_reg_addr, loopback_command);
 1fc:	6c 2f       	mov	r22, r28
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
 200:	0e 94 b3 00 	call	0x166	; 0x166 <mcp2515_write>
	printf("canctrl is written to %4d: \r\n", mcp2515_read(can_ctrl_reg_addr));
 204:	8f e0       	ldi	r24, 0x0F	; 15
 206:	0e 94 c5 00 	call	0x18a	; 0x18a <mcp2515_read>
 20a:	1f 92       	push	r1
 20c:	8f 93       	push	r24
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	9f 93       	push	r25
 214:	8f 93       	push	r24
 216:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>
	

	// read canstat.opmode
	uint8_t canstat_reg_addres = 0x0e; 
	// opmode is bit 7-5 
	uint8_t canstat =  mcp2515_read(canstat_reg_addres);
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 c5 00 	call	0x18a	; 0x18a <mcp2515_read>
 220:	c8 2f       	mov	r28, r24
	uint8_t opmode = canstat >> 5; // the bitshift is in order to only see the uppermost three bits
	printf("canstat when setting loopback mode is %4d: \r\n", canstat);
 222:	1f 92       	push	r1
 224:	8f 93       	push	r24
 226:	8d e2       	ldi	r24, 0x2D	; 45
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	9f 93       	push	r25
 22c:	8f 93       	push	r24
 22e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <printf>

	if(opmode == 2){ // 3 corresponds to looback command, 0b010
 232:	c2 95       	swap	r28
 234:	c6 95       	lsr	r28
 236:	c7 70       	andi	r28, 0x07	; 7
 238:	8d b7       	in	r24, 0x3d	; 61
 23a:	9e b7       	in	r25, 0x3e	; 62
 23c:	40 96       	adiw	r24, 0x10	; 16
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	9e bf       	out	0x3e, r25	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	8d bf       	out	0x3d, r24	; 61
 248:	c2 30       	cpi	r28, 0x02	; 2
 24a:	29 f4       	brne	.+10     	; 0x256 <mcp2515_set_loopback_mode+0x90>
		printf("sucessfully set loopback mode\r\n");
 24c:	8b e5       	ldi	r24, 0x5B	; 91
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	0e 94 86 02 	call	0x50c	; 0x50c <puts>
 254:	04 c0       	rjmp	.+8      	; 0x25e <mcp2515_set_loopback_mode+0x98>
	}
	else{
		printf("setting loopback mode failed\r\n");
 256:	8a e7       	ldi	r24, 0x7A	; 122
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	0e 94 86 02 	call	0x50c	; 0x50c <puts>
	}
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <oled_init>:
//1200 - 10 bit


//write command to oled
void write_c(uint8_t command){
    oled_command_addr[0] = command;
 262:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 266:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 26a:	8e ea       	ldi	r24, 0xAE	; 174
 26c:	80 83       	st	Z, r24
 26e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 272:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 276:	81 ea       	ldi	r24, 0xA1	; 161
 278:	80 83       	st	Z, r24
 27a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 27e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 282:	8a ed       	ldi	r24, 0xDA	; 218
 284:	80 83       	st	Z, r24
 286:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 28a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 28e:	82 e1       	ldi	r24, 0x12	; 18
 290:	80 83       	st	Z, r24
 292:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 296:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 29a:	88 ec       	ldi	r24, 0xC8	; 200
 29c:	80 83       	st	Z, r24
 29e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 2a2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 2a6:	88 ea       	ldi	r24, 0xA8	; 168
 2a8:	80 83       	st	Z, r24
 2aa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 2ae:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 2b2:	8f e3       	ldi	r24, 0x3F	; 63
 2b4:	80 83       	st	Z, r24
 2b6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 2ba:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 2be:	85 ed       	ldi	r24, 0xD5	; 213
 2c0:	80 83       	st	Z, r24
 2c2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 2c6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 2ca:	80 e8       	ldi	r24, 0x80	; 128
 2cc:	80 83       	st	Z, r24
 2ce:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 2d2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 2d6:	81 e8       	ldi	r24, 0x81	; 129
 2d8:	80 83       	st	Z, r24
 2da:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 2de:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 2e2:	80 e5       	ldi	r24, 0x50	; 80
 2e4:	80 83       	st	Z, r24
 2e6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 2ea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 2ee:	89 ed       	ldi	r24, 0xD9	; 217
 2f0:	80 83       	st	Z, r24
 2f2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 2f6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 2fa:	81 e2       	ldi	r24, 0x21	; 33
 2fc:	80 83       	st	Z, r24
 2fe:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 302:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 306:	80 e2       	ldi	r24, 0x20	; 32
 308:	80 83       	st	Z, r24
 30a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 30e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
 316:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 31a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 31e:	8b ed       	ldi	r24, 0xDB	; 219
 320:	80 83       	st	Z, r24
 322:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 326:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 32a:	80 e3       	ldi	r24, 0x30	; 48
 32c:	80 83       	st	Z, r24
 32e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 332:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 336:	8d ea       	ldi	r24, 0xAD	; 173
 338:	80 83       	st	Z, r24
 33a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 33e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 342:	10 82       	st	Z, r1
 344:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 348:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 34c:	84 ea       	ldi	r24, 0xA4	; 164
 34e:	80 83       	st	Z, r24
 350:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 354:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 358:	96 ea       	ldi	r25, 0xA6	; 166
 35a:	90 83       	st	Z, r25
 35c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 360:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 364:	9f ea       	ldi	r25, 0xAF	; 175
 366:	90 83       	st	Z, r25
 368:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 36c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 370:	95 ea       	ldi	r25, 0xA5	; 165
 372:	90 83       	st	Z, r25
 374:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 378:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 37c:	80 83       	st	Z, r24
 37e:	08 95       	ret

00000380 <oled_goto_line>:
}

void oled_goto_line(uint8_t line){
	// line corresponds to the last three bits, so the command is 10110 x_1 x_2 x_3
	
	write_c(0xb0 | line); //set page start for page adressing mode
 380:	98 2f       	mov	r25, r24
 382:	90 6b       	ori	r25, 0xB0	; 176
//1200 - 10 bit


//write command to oled
void write_c(uint8_t command){
    oled_command_addr[0] = command;
 384:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 388:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 38c:	90 83       	st	Z, r25

void oled_goto_line(uint8_t line){
	// line corresponds to the last three bits, so the command is 10110 x_1 x_2 x_3
	
	write_c(0xb0 | line); //set page start for page adressing mode
	oled_cursor_line = line; 
 38e:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
 392:	08 95       	ret

00000394 <oled_clear_screen>:
	
	
}

// to fill the screen with zeroes, making it turn black
void oled_clear_screen(){
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
	//should be done 896 times, but for safetys sake i do it fewer 
	for (int i = 0; i < 8; ++i) // row*col = 7*128 =  896 
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		oled_goto_line(i);
 39c:	ce 01       	movw	r24, r28
 39e:	0e 94 c0 01 	call	0x380	; 0x380 <oled_goto_line>
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	90 e0       	ldi	r25, 0x00	; 0
    oled_command_addr[0] = command;
}

//write data to oled
void write_d(uint8_t data_to_write){
    oled_data_addr[0] = data_to_write;
 3a6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <oled_data_addr>
 3aa:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <oled_data_addr+0x1>
 3ae:	10 82       	st	Z, r1
 3b0:	01 97       	sbiw	r24, 0x01	; 1
void oled_clear_screen(){
	//should be done 896 times, but for safetys sake i do it fewer 
	for (int i = 0; i < 8; ++i) // row*col = 7*128 =  896 
	{
		oled_goto_line(i);
		for (int j = 0; j < 128; ++j)
 3b2:	c9 f7       	brne	.-14     	; 0x3a6 <oled_clear_screen+0x12>
}

// to fill the screen with zeroes, making it turn black
void oled_clear_screen(){
	//should be done 896 times, but for safetys sake i do it fewer 
	for (int i = 0; i < 8; ++i) // row*col = 7*128 =  896 
 3b4:	21 96       	adiw	r28, 0x01	; 1
 3b6:	c8 30       	cpi	r28, 0x08	; 8
 3b8:	d1 05       	cpc	r29, r1
 3ba:	81 f7       	brne	.-32     	; 0x39c <oled_clear_screen+0x8>
		for (int j = 0; j < 128; ++j)
		{
			write_d(0);	
		}
	}
	oled_goto_line(0);
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 c0 01 	call	0x380	; 0x380 <oled_goto_line>
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <oled_goto_column>:
	oled_cursor_line = line; 
}

void oled_goto_column(uint8_t column){
    //change the column pointed to
	uint8_t lower_nibble = (column & 0b00001111);
 3ca:	98 2f       	mov	r25, r24
 3cc:	9f 70       	andi	r25, 0x0F	; 15
//1200 - 10 bit


//write command to oled
void write_c(uint8_t command){
    oled_command_addr[0] = command;
 3ce:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 3d2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 3d6:	90 83       	st	Z, r25
void oled_goto_column(uint8_t column){
    //change the column pointed to
	uint8_t lower_nibble = (column & 0b00001111);
	uint8_t upper_nibble = (column >> 4); 
	write_c(0x0|lower_nibble); // set lower nibble of column
	write_c(0x10|upper_nibble); // set upper nibble of column
 3d8:	82 95       	swap	r24
 3da:	8f 70       	andi	r24, 0x0F	; 15
 3dc:	80 61       	ori	r24, 0x10	; 16
//1200 - 10 bit


//write command to oled
void write_c(uint8_t command){
    oled_command_addr[0] = command;
 3de:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <oled_command_addr>
 3e2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <oled_command_addr+0x1>
 3e6:	80 83       	st	Z, r24
 3e8:	08 95       	ret

000003ea <oled_newline>:
void oled_invert_display(){
	write_c(0xa7); //command to invert the display
}

void oled_newline(){
	if (oled_cursor_line<7)
 3ea:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
 3ee:	87 30       	cpi	r24, 0x07	; 7
 3f0:	28 f4       	brcc	.+10     	; 0x3fc <oled_newline+0x12>
	{
		oled_goto_line(oled_cursor_line+1);
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	0e 94 c0 01 	call	0x380	; 0x380 <oled_goto_line>
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	}
	else{
		oled_goto_line(0);
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 c0 01 	call	0x380	; 0x380 <oled_goto_line>
	}
	oled_goto_column(0);
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 e5 01 	call	0x3ca	; 0x3ca <oled_goto_column>
 40c:	08 95       	ret

0000040e <SPI_MasterInit>:
#include <avr/io.h>
#include "spi_driver.h"

void SPI_MasterInit(void) {
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<DDB5)|(1<<DDB7) | (1<<DDB4) ; // corresponds to DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK); in example program
 40e:	80 eb       	ldi	r24, 0xB0	; 176
 410:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 412:	81 e5       	ldi	r24, 0x51	; 81
 414:	8d b9       	out	0x0d, r24	; 13
 416:	08 95       	ret

00000418 <SPI_MasterTransmit>:
void SPI_MasterTransmit(char cData) {

	//printf("spi transmitting: %4d \r\n", cData);

	/* Start transmission */
	SPDR = cData;
 418:	8f b9       	out	0x0f, r24	; 15

	/* Wait for transmission complete */ 
	while(!(SPSR & (1<<SPIF)));
 41a:	77 9b       	sbis	0x0e, 7	; 14
 41c:	fe cf       	rjmp	.-4      	; 0x41a <SPI_MasterTransmit+0x2>


	//printf("spi transmit finished\r\n");
}
 41e:	08 95       	ret

00000420 <SPI_MasterRead>:

char SPI_MasterRead() {

	// send a dummy byte to get transmission started
	SPDR = 0x05; //5 is just an arbitrary number
 420:	85 e0       	ldi	r24, 0x05	; 5
 422:	8f b9       	out	0x0f, r24	; 15

	/* Wait for transmission complete */ 
	while(!(SPSR & (1<<SPIF)));
 424:	77 9b       	sbis	0x0e, 7	; 14
 426:	fe cf       	rjmp	.-4      	; 0x424 <SPI_MasterRead+0x4>

	return SPDR;
 428:	8f b1       	in	r24, 0x0f	; 15
 42a:	08 95       	ret

0000042c <USART_Init>:
#include <avr/io.h>

void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char) (ubrr>>8);
 42c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 42e:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 430:	88 e1       	ldi	r24, 0x18	; 24
 432:	8a b9       	out	0x0a, r24	; 10
	/*Set frame format: 8data, 2stop bit*/
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00); // studass said this numbering is correct
 434:	8e e8       	ldi	r24, 0x8E	; 142
 436:	80 bd       	out	0x20, r24	; 32
 438:	08 95       	ret

0000043a <USART_TRANSMIT>:

}

void USART_TRANSMIT(unsigned char data){
	/*wait for empty transmit buffer*/
	while(!(UCSR0A & (1<<UDRE0))  ) //note:UCSR0A OR 1A?
 43a:	5d 9b       	sbis	0x0b, 5	; 11
 43c:	fe cf       	rjmp	.-4      	; 0x43a <USART_TRANSMIT>
	;
	

	// transmit the data
	UDR0 = data;
 43e:	8c b9       	out	0x0c, r24	; 12
 440:	08 95       	ret

00000442 <USART_Receive>:
unsigned char USART_Receive( void)
{
	/*Wait for data to be received*/
	//TODO: change into interrupt instead
	//TODO: make this work.
	while(!(UCSR0A & (1<<RXC0)))
 442:	5f 9b       	sbis	0x0b, 7	; 11
 444:	fe cf       	rjmp	.-4      	; 0x442 <USART_Receive>
	;
	/*Get and return received data from buffer*/
	return UDR0;
 446:	8c b1       	in	r24, 0x0c	; 12
}
 448:	08 95       	ret

0000044a <fdevopen>:
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	31 f4       	brne	.+12     	; 0x462 <fdevopen+0x18>
 456:	61 15       	cp	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	19 f4       	brne	.+6      	; 0x462 <fdevopen+0x18>
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	3a c0       	rjmp	.+116    	; 0x4d6 <fdevopen+0x8c>
 462:	8b 01       	movw	r16, r22
 464:	ec 01       	movw	r28, r24
 466:	6e e0       	ldi	r22, 0x0E	; 14
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 97 04 	call	0x92e	; 0x92e <calloc>
 472:	fc 01       	movw	r30, r24
 474:	89 2b       	or	r24, r25
 476:	91 f3       	breq	.-28     	; 0x45c <fdevopen+0x12>
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	83 83       	std	Z+3, r24	; 0x03
 47c:	01 15       	cp	r16, r1
 47e:	11 05       	cpc	r17, r1
 480:	71 f0       	breq	.+28     	; 0x49e <fdevopen+0x54>
 482:	13 87       	std	Z+11, r17	; 0x0b
 484:	02 87       	std	Z+10, r16	; 0x0a
 486:	81 e8       	ldi	r24, 0x81	; 129
 488:	83 83       	std	Z+3, r24	; 0x03
 48a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <__iob>
 48e:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <__iob+0x1>
 492:	89 2b       	or	r24, r25
 494:	21 f4       	brne	.+8      	; 0x49e <fdevopen+0x54>
 496:	f0 93 9a 02 	sts	0x029A, r31	; 0x80029a <__iob+0x1>
 49a:	e0 93 99 02 	sts	0x0299, r30	; 0x800299 <__iob>
 49e:	20 97       	sbiw	r28, 0x00	; 0
 4a0:	c9 f0       	breq	.+50     	; 0x4d4 <fdevopen+0x8a>
 4a2:	d1 87       	std	Z+9, r29	; 0x09
 4a4:	c0 87       	std	Z+8, r28	; 0x08
 4a6:	83 81       	ldd	r24, Z+3	; 0x03
 4a8:	82 60       	ori	r24, 0x02	; 2
 4aa:	83 83       	std	Z+3, r24	; 0x03
 4ac:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <__iob+0x2>
 4b0:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <__iob+0x3>
 4b4:	89 2b       	or	r24, r25
 4b6:	71 f4       	brne	.+28     	; 0x4d4 <fdevopen+0x8a>
 4b8:	f0 93 9c 02 	sts	0x029C, r31	; 0x80029c <__iob+0x3>
 4bc:	e0 93 9b 02 	sts	0x029B, r30	; 0x80029b <__iob+0x2>
 4c0:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <__iob+0x4>
 4c4:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <__iob+0x5>
 4c8:	89 2b       	or	r24, r25
 4ca:	21 f4       	brne	.+8      	; 0x4d4 <fdevopen+0x8a>
 4cc:	f0 93 9e 02 	sts	0x029E, r31	; 0x80029e <__iob+0x5>
 4d0:	e0 93 9d 02 	sts	0x029D, r30	; 0x80029d <__iob+0x4>
 4d4:	cf 01       	movw	r24, r30
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	08 95       	ret

000004e0 <printf>:
 4e0:	a0 e0       	ldi	r26, 0x00	; 0
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	e6 e7       	ldi	r30, 0x76	; 118
 4e6:	f2 e0       	ldi	r31, 0x02	; 2
 4e8:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__prologue_saves__+0x20>
 4ec:	ae 01       	movw	r20, r28
 4ee:	4b 5f       	subi	r20, 0xFB	; 251
 4f0:	5f 4f       	sbci	r21, 0xFF	; 255
 4f2:	fa 01       	movw	r30, r20
 4f4:	61 91       	ld	r22, Z+
 4f6:	71 91       	ld	r23, Z+
 4f8:	af 01       	movw	r20, r30
 4fa:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <__iob+0x2>
 4fe:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <__iob+0x3>
 502:	0e 94 b6 02 	call	0x56c	; 0x56c <vfprintf>
 506:	e2 e0       	ldi	r30, 0x02	; 2
 508:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__epilogue_restores__+0x20>

0000050c <puts>:
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <__iob+0x2>
 518:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <__iob+0x3>
 51c:	23 81       	ldd	r18, Z+3	; 0x03
 51e:	21 ff       	sbrs	r18, 1
 520:	1b c0       	rjmp	.+54     	; 0x558 <puts+0x4c>
 522:	8c 01       	movw	r16, r24
 524:	d0 e0       	ldi	r29, 0x00	; 0
 526:	c0 e0       	ldi	r28, 0x00	; 0
 528:	f8 01       	movw	r30, r16
 52a:	81 91       	ld	r24, Z+
 52c:	8f 01       	movw	r16, r30
 52e:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <__iob+0x2>
 532:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <__iob+0x3>
 536:	db 01       	movw	r26, r22
 538:	18 96       	adiw	r26, 0x08	; 8
 53a:	ed 91       	ld	r30, X+
 53c:	fc 91       	ld	r31, X
 53e:	19 97       	sbiw	r26, 0x09	; 9
 540:	88 23       	and	r24, r24
 542:	31 f0       	breq	.+12     	; 0x550 <puts+0x44>
 544:	09 95       	icall
 546:	89 2b       	or	r24, r25
 548:	79 f3       	breq	.-34     	; 0x528 <puts+0x1c>
 54a:	df ef       	ldi	r29, 0xFF	; 255
 54c:	cf ef       	ldi	r28, 0xFF	; 255
 54e:	ec cf       	rjmp	.-40     	; 0x528 <puts+0x1c>
 550:	8a e0       	ldi	r24, 0x0A	; 10
 552:	09 95       	icall
 554:	89 2b       	or	r24, r25
 556:	19 f0       	breq	.+6      	; 0x55e <puts+0x52>
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	9f ef       	ldi	r25, 0xFF	; 255
 55c:	02 c0       	rjmp	.+4      	; 0x562 <puts+0x56>
 55e:	8d 2f       	mov	r24, r29
 560:	9c 2f       	mov	r25, r28
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	08 95       	ret

0000056c <vfprintf>:
 56c:	ab e0       	ldi	r26, 0x0B	; 11
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	ec eb       	ldi	r30, 0xBC	; 188
 572:	f2 e0       	ldi	r31, 0x02	; 2
 574:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__prologue_saves__>
 578:	6c 01       	movw	r12, r24
 57a:	7b 01       	movw	r14, r22
 57c:	8a 01       	movw	r16, r20
 57e:	fc 01       	movw	r30, r24
 580:	17 82       	std	Z+7, r1	; 0x07
 582:	16 82       	std	Z+6, r1	; 0x06
 584:	83 81       	ldd	r24, Z+3	; 0x03
 586:	81 ff       	sbrs	r24, 1
 588:	cc c1       	rjmp	.+920    	; 0x922 <vfprintf+0x3b6>
 58a:	ce 01       	movw	r24, r28
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	3c 01       	movw	r6, r24
 590:	f6 01       	movw	r30, r12
 592:	93 81       	ldd	r25, Z+3	; 0x03
 594:	f7 01       	movw	r30, r14
 596:	93 fd       	sbrc	r25, 3
 598:	85 91       	lpm	r24, Z+
 59a:	93 ff       	sbrs	r25, 3
 59c:	81 91       	ld	r24, Z+
 59e:	7f 01       	movw	r14, r30
 5a0:	88 23       	and	r24, r24
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <vfprintf+0x3a>
 5a4:	ba c1       	rjmp	.+884    	; 0x91a <vfprintf+0x3ae>
 5a6:	85 32       	cpi	r24, 0x25	; 37
 5a8:	39 f4       	brne	.+14     	; 0x5b8 <vfprintf+0x4c>
 5aa:	93 fd       	sbrc	r25, 3
 5ac:	85 91       	lpm	r24, Z+
 5ae:	93 ff       	sbrs	r25, 3
 5b0:	81 91       	ld	r24, Z+
 5b2:	7f 01       	movw	r14, r30
 5b4:	85 32       	cpi	r24, 0x25	; 37
 5b6:	29 f4       	brne	.+10     	; 0x5c2 <vfprintf+0x56>
 5b8:	b6 01       	movw	r22, r12
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 5c0:	e7 cf       	rjmp	.-50     	; 0x590 <vfprintf+0x24>
 5c2:	91 2c       	mov	r9, r1
 5c4:	21 2c       	mov	r2, r1
 5c6:	31 2c       	mov	r3, r1
 5c8:	ff e1       	ldi	r31, 0x1F	; 31
 5ca:	f3 15       	cp	r31, r3
 5cc:	d8 f0       	brcs	.+54     	; 0x604 <vfprintf+0x98>
 5ce:	8b 32       	cpi	r24, 0x2B	; 43
 5d0:	79 f0       	breq	.+30     	; 0x5f0 <vfprintf+0x84>
 5d2:	38 f4       	brcc	.+14     	; 0x5e2 <vfprintf+0x76>
 5d4:	80 32       	cpi	r24, 0x20	; 32
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <vfprintf+0x8a>
 5d8:	83 32       	cpi	r24, 0x23	; 35
 5da:	a1 f4       	brne	.+40     	; 0x604 <vfprintf+0x98>
 5dc:	23 2d       	mov	r18, r3
 5de:	20 61       	ori	r18, 0x10	; 16
 5e0:	1d c0       	rjmp	.+58     	; 0x61c <vfprintf+0xb0>
 5e2:	8d 32       	cpi	r24, 0x2D	; 45
 5e4:	61 f0       	breq	.+24     	; 0x5fe <vfprintf+0x92>
 5e6:	80 33       	cpi	r24, 0x30	; 48
 5e8:	69 f4       	brne	.+26     	; 0x604 <vfprintf+0x98>
 5ea:	23 2d       	mov	r18, r3
 5ec:	21 60       	ori	r18, 0x01	; 1
 5ee:	16 c0       	rjmp	.+44     	; 0x61c <vfprintf+0xb0>
 5f0:	83 2d       	mov	r24, r3
 5f2:	82 60       	ori	r24, 0x02	; 2
 5f4:	38 2e       	mov	r3, r24
 5f6:	e3 2d       	mov	r30, r3
 5f8:	e4 60       	ori	r30, 0x04	; 4
 5fa:	3e 2e       	mov	r3, r30
 5fc:	2a c0       	rjmp	.+84     	; 0x652 <vfprintf+0xe6>
 5fe:	f3 2d       	mov	r31, r3
 600:	f8 60       	ori	r31, 0x08	; 8
 602:	1d c0       	rjmp	.+58     	; 0x63e <vfprintf+0xd2>
 604:	37 fc       	sbrc	r3, 7
 606:	2d c0       	rjmp	.+90     	; 0x662 <vfprintf+0xf6>
 608:	20 ed       	ldi	r18, 0xD0	; 208
 60a:	28 0f       	add	r18, r24
 60c:	2a 30       	cpi	r18, 0x0A	; 10
 60e:	40 f0       	brcs	.+16     	; 0x620 <vfprintf+0xb4>
 610:	8e 32       	cpi	r24, 0x2E	; 46
 612:	b9 f4       	brne	.+46     	; 0x642 <vfprintf+0xd6>
 614:	36 fc       	sbrc	r3, 6
 616:	81 c1       	rjmp	.+770    	; 0x91a <vfprintf+0x3ae>
 618:	23 2d       	mov	r18, r3
 61a:	20 64       	ori	r18, 0x40	; 64
 61c:	32 2e       	mov	r3, r18
 61e:	19 c0       	rjmp	.+50     	; 0x652 <vfprintf+0xe6>
 620:	36 fe       	sbrs	r3, 6
 622:	06 c0       	rjmp	.+12     	; 0x630 <vfprintf+0xc4>
 624:	8a e0       	ldi	r24, 0x0A	; 10
 626:	98 9e       	mul	r9, r24
 628:	20 0d       	add	r18, r0
 62a:	11 24       	eor	r1, r1
 62c:	92 2e       	mov	r9, r18
 62e:	11 c0       	rjmp	.+34     	; 0x652 <vfprintf+0xe6>
 630:	ea e0       	ldi	r30, 0x0A	; 10
 632:	2e 9e       	mul	r2, r30
 634:	20 0d       	add	r18, r0
 636:	11 24       	eor	r1, r1
 638:	22 2e       	mov	r2, r18
 63a:	f3 2d       	mov	r31, r3
 63c:	f0 62       	ori	r31, 0x20	; 32
 63e:	3f 2e       	mov	r3, r31
 640:	08 c0       	rjmp	.+16     	; 0x652 <vfprintf+0xe6>
 642:	8c 36       	cpi	r24, 0x6C	; 108
 644:	21 f4       	brne	.+8      	; 0x64e <vfprintf+0xe2>
 646:	83 2d       	mov	r24, r3
 648:	80 68       	ori	r24, 0x80	; 128
 64a:	38 2e       	mov	r3, r24
 64c:	02 c0       	rjmp	.+4      	; 0x652 <vfprintf+0xe6>
 64e:	88 36       	cpi	r24, 0x68	; 104
 650:	41 f4       	brne	.+16     	; 0x662 <vfprintf+0xf6>
 652:	f7 01       	movw	r30, r14
 654:	93 fd       	sbrc	r25, 3
 656:	85 91       	lpm	r24, Z+
 658:	93 ff       	sbrs	r25, 3
 65a:	81 91       	ld	r24, Z+
 65c:	7f 01       	movw	r14, r30
 65e:	81 11       	cpse	r24, r1
 660:	b3 cf       	rjmp	.-154    	; 0x5c8 <vfprintf+0x5c>
 662:	98 2f       	mov	r25, r24
 664:	9f 7d       	andi	r25, 0xDF	; 223
 666:	95 54       	subi	r25, 0x45	; 69
 668:	93 30       	cpi	r25, 0x03	; 3
 66a:	28 f4       	brcc	.+10     	; 0x676 <vfprintf+0x10a>
 66c:	0c 5f       	subi	r16, 0xFC	; 252
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	9f e3       	ldi	r25, 0x3F	; 63
 672:	99 83       	std	Y+1, r25	; 0x01
 674:	0d c0       	rjmp	.+26     	; 0x690 <vfprintf+0x124>
 676:	83 36       	cpi	r24, 0x63	; 99
 678:	31 f0       	breq	.+12     	; 0x686 <vfprintf+0x11a>
 67a:	83 37       	cpi	r24, 0x73	; 115
 67c:	71 f0       	breq	.+28     	; 0x69a <vfprintf+0x12e>
 67e:	83 35       	cpi	r24, 0x53	; 83
 680:	09 f0       	breq	.+2      	; 0x684 <vfprintf+0x118>
 682:	59 c0       	rjmp	.+178    	; 0x736 <vfprintf+0x1ca>
 684:	21 c0       	rjmp	.+66     	; 0x6c8 <vfprintf+0x15c>
 686:	f8 01       	movw	r30, r16
 688:	80 81       	ld	r24, Z
 68a:	89 83       	std	Y+1, r24	; 0x01
 68c:	0e 5f       	subi	r16, 0xFE	; 254
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	88 24       	eor	r8, r8
 692:	83 94       	inc	r8
 694:	91 2c       	mov	r9, r1
 696:	53 01       	movw	r10, r6
 698:	13 c0       	rjmp	.+38     	; 0x6c0 <vfprintf+0x154>
 69a:	28 01       	movw	r4, r16
 69c:	f2 e0       	ldi	r31, 0x02	; 2
 69e:	4f 0e       	add	r4, r31
 6a0:	51 1c       	adc	r5, r1
 6a2:	f8 01       	movw	r30, r16
 6a4:	a0 80       	ld	r10, Z
 6a6:	b1 80       	ldd	r11, Z+1	; 0x01
 6a8:	36 fe       	sbrs	r3, 6
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <vfprintf+0x146>
 6ac:	69 2d       	mov	r22, r9
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <vfprintf+0x14a>
 6b2:	6f ef       	ldi	r22, 0xFF	; 255
 6b4:	7f ef       	ldi	r23, 0xFF	; 255
 6b6:	c5 01       	movw	r24, r10
 6b8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <strnlen>
 6bc:	4c 01       	movw	r8, r24
 6be:	82 01       	movw	r16, r4
 6c0:	f3 2d       	mov	r31, r3
 6c2:	ff 77       	andi	r31, 0x7F	; 127
 6c4:	3f 2e       	mov	r3, r31
 6c6:	16 c0       	rjmp	.+44     	; 0x6f4 <vfprintf+0x188>
 6c8:	28 01       	movw	r4, r16
 6ca:	22 e0       	ldi	r18, 0x02	; 2
 6cc:	42 0e       	add	r4, r18
 6ce:	51 1c       	adc	r5, r1
 6d0:	f8 01       	movw	r30, r16
 6d2:	a0 80       	ld	r10, Z
 6d4:	b1 80       	ldd	r11, Z+1	; 0x01
 6d6:	36 fe       	sbrs	r3, 6
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <vfprintf+0x174>
 6da:	69 2d       	mov	r22, r9
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <vfprintf+0x178>
 6e0:	6f ef       	ldi	r22, 0xFF	; 255
 6e2:	7f ef       	ldi	r23, 0xFF	; 255
 6e4:	c5 01       	movw	r24, r10
 6e6:	0e 94 d4 05 	call	0xba8	; 0xba8 <strnlen_P>
 6ea:	4c 01       	movw	r8, r24
 6ec:	f3 2d       	mov	r31, r3
 6ee:	f0 68       	ori	r31, 0x80	; 128
 6f0:	3f 2e       	mov	r3, r31
 6f2:	82 01       	movw	r16, r4
 6f4:	33 fc       	sbrc	r3, 3
 6f6:	1b c0       	rjmp	.+54     	; 0x72e <vfprintf+0x1c2>
 6f8:	82 2d       	mov	r24, r2
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	88 16       	cp	r8, r24
 6fe:	99 06       	cpc	r9, r25
 700:	b0 f4       	brcc	.+44     	; 0x72e <vfprintf+0x1c2>
 702:	b6 01       	movw	r22, r12
 704:	80 e2       	ldi	r24, 0x20	; 32
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 70c:	2a 94       	dec	r2
 70e:	f4 cf       	rjmp	.-24     	; 0x6f8 <vfprintf+0x18c>
 710:	f5 01       	movw	r30, r10
 712:	37 fc       	sbrc	r3, 7
 714:	85 91       	lpm	r24, Z+
 716:	37 fe       	sbrs	r3, 7
 718:	81 91       	ld	r24, Z+
 71a:	5f 01       	movw	r10, r30
 71c:	b6 01       	movw	r22, r12
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 724:	21 10       	cpse	r2, r1
 726:	2a 94       	dec	r2
 728:	21 e0       	ldi	r18, 0x01	; 1
 72a:	82 1a       	sub	r8, r18
 72c:	91 08       	sbc	r9, r1
 72e:	81 14       	cp	r8, r1
 730:	91 04       	cpc	r9, r1
 732:	71 f7       	brne	.-36     	; 0x710 <vfprintf+0x1a4>
 734:	e8 c0       	rjmp	.+464    	; 0x906 <vfprintf+0x39a>
 736:	84 36       	cpi	r24, 0x64	; 100
 738:	11 f0       	breq	.+4      	; 0x73e <vfprintf+0x1d2>
 73a:	89 36       	cpi	r24, 0x69	; 105
 73c:	41 f5       	brne	.+80     	; 0x78e <vfprintf+0x222>
 73e:	f8 01       	movw	r30, r16
 740:	37 fe       	sbrs	r3, 7
 742:	07 c0       	rjmp	.+14     	; 0x752 <vfprintf+0x1e6>
 744:	60 81       	ld	r22, Z
 746:	71 81       	ldd	r23, Z+1	; 0x01
 748:	82 81       	ldd	r24, Z+2	; 0x02
 74a:	93 81       	ldd	r25, Z+3	; 0x03
 74c:	0c 5f       	subi	r16, 0xFC	; 252
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	08 c0       	rjmp	.+16     	; 0x762 <vfprintf+0x1f6>
 752:	60 81       	ld	r22, Z
 754:	71 81       	ldd	r23, Z+1	; 0x01
 756:	07 2e       	mov	r0, r23
 758:	00 0c       	add	r0, r0
 75a:	88 0b       	sbc	r24, r24
 75c:	99 0b       	sbc	r25, r25
 75e:	0e 5f       	subi	r16, 0xFE	; 254
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	f3 2d       	mov	r31, r3
 764:	ff 76       	andi	r31, 0x6F	; 111
 766:	3f 2e       	mov	r3, r31
 768:	97 ff       	sbrs	r25, 7
 76a:	09 c0       	rjmp	.+18     	; 0x77e <vfprintf+0x212>
 76c:	90 95       	com	r25
 76e:	80 95       	com	r24
 770:	70 95       	com	r23
 772:	61 95       	neg	r22
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	8f 4f       	sbci	r24, 0xFF	; 255
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	f0 68       	ori	r31, 0x80	; 128
 77c:	3f 2e       	mov	r3, r31
 77e:	2a e0       	ldi	r18, 0x0A	; 10
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	a3 01       	movw	r20, r6
 784:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__ultoa_invert>
 788:	88 2e       	mov	r8, r24
 78a:	86 18       	sub	r8, r6
 78c:	45 c0       	rjmp	.+138    	; 0x818 <vfprintf+0x2ac>
 78e:	85 37       	cpi	r24, 0x75	; 117
 790:	31 f4       	brne	.+12     	; 0x79e <vfprintf+0x232>
 792:	23 2d       	mov	r18, r3
 794:	2f 7e       	andi	r18, 0xEF	; 239
 796:	b2 2e       	mov	r11, r18
 798:	2a e0       	ldi	r18, 0x0A	; 10
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	25 c0       	rjmp	.+74     	; 0x7e8 <vfprintf+0x27c>
 79e:	93 2d       	mov	r25, r3
 7a0:	99 7f       	andi	r25, 0xF9	; 249
 7a2:	b9 2e       	mov	r11, r25
 7a4:	8f 36       	cpi	r24, 0x6F	; 111
 7a6:	c1 f0       	breq	.+48     	; 0x7d8 <vfprintf+0x26c>
 7a8:	18 f4       	brcc	.+6      	; 0x7b0 <vfprintf+0x244>
 7aa:	88 35       	cpi	r24, 0x58	; 88
 7ac:	79 f0       	breq	.+30     	; 0x7cc <vfprintf+0x260>
 7ae:	b5 c0       	rjmp	.+362    	; 0x91a <vfprintf+0x3ae>
 7b0:	80 37       	cpi	r24, 0x70	; 112
 7b2:	19 f0       	breq	.+6      	; 0x7ba <vfprintf+0x24e>
 7b4:	88 37       	cpi	r24, 0x78	; 120
 7b6:	21 f0       	breq	.+8      	; 0x7c0 <vfprintf+0x254>
 7b8:	b0 c0       	rjmp	.+352    	; 0x91a <vfprintf+0x3ae>
 7ba:	e9 2f       	mov	r30, r25
 7bc:	e0 61       	ori	r30, 0x10	; 16
 7be:	be 2e       	mov	r11, r30
 7c0:	b4 fe       	sbrs	r11, 4
 7c2:	0d c0       	rjmp	.+26     	; 0x7de <vfprintf+0x272>
 7c4:	fb 2d       	mov	r31, r11
 7c6:	f4 60       	ori	r31, 0x04	; 4
 7c8:	bf 2e       	mov	r11, r31
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <vfprintf+0x272>
 7cc:	34 fe       	sbrs	r3, 4
 7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <vfprintf+0x278>
 7d0:	29 2f       	mov	r18, r25
 7d2:	26 60       	ori	r18, 0x06	; 6
 7d4:	b2 2e       	mov	r11, r18
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <vfprintf+0x278>
 7d8:	28 e0       	ldi	r18, 0x08	; 8
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <vfprintf+0x27c>
 7de:	20 e1       	ldi	r18, 0x10	; 16
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <vfprintf+0x27c>
 7e4:	20 e1       	ldi	r18, 0x10	; 16
 7e6:	32 e0       	ldi	r19, 0x02	; 2
 7e8:	f8 01       	movw	r30, r16
 7ea:	b7 fe       	sbrs	r11, 7
 7ec:	07 c0       	rjmp	.+14     	; 0x7fc <vfprintf+0x290>
 7ee:	60 81       	ld	r22, Z
 7f0:	71 81       	ldd	r23, Z+1	; 0x01
 7f2:	82 81       	ldd	r24, Z+2	; 0x02
 7f4:	93 81       	ldd	r25, Z+3	; 0x03
 7f6:	0c 5f       	subi	r16, 0xFC	; 252
 7f8:	1f 4f       	sbci	r17, 0xFF	; 255
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <vfprintf+0x29c>
 7fc:	60 81       	ld	r22, Z
 7fe:	71 81       	ldd	r23, Z+1	; 0x01
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 5f       	subi	r16, 0xFE	; 254
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	a3 01       	movw	r20, r6
 80a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__ultoa_invert>
 80e:	88 2e       	mov	r8, r24
 810:	86 18       	sub	r8, r6
 812:	fb 2d       	mov	r31, r11
 814:	ff 77       	andi	r31, 0x7F	; 127
 816:	3f 2e       	mov	r3, r31
 818:	36 fe       	sbrs	r3, 6
 81a:	0d c0       	rjmp	.+26     	; 0x836 <vfprintf+0x2ca>
 81c:	23 2d       	mov	r18, r3
 81e:	2e 7f       	andi	r18, 0xFE	; 254
 820:	a2 2e       	mov	r10, r18
 822:	89 14       	cp	r8, r9
 824:	58 f4       	brcc	.+22     	; 0x83c <vfprintf+0x2d0>
 826:	34 fe       	sbrs	r3, 4
 828:	0b c0       	rjmp	.+22     	; 0x840 <vfprintf+0x2d4>
 82a:	32 fc       	sbrc	r3, 2
 82c:	09 c0       	rjmp	.+18     	; 0x840 <vfprintf+0x2d4>
 82e:	83 2d       	mov	r24, r3
 830:	8e 7e       	andi	r24, 0xEE	; 238
 832:	a8 2e       	mov	r10, r24
 834:	05 c0       	rjmp	.+10     	; 0x840 <vfprintf+0x2d4>
 836:	b8 2c       	mov	r11, r8
 838:	a3 2c       	mov	r10, r3
 83a:	03 c0       	rjmp	.+6      	; 0x842 <vfprintf+0x2d6>
 83c:	b8 2c       	mov	r11, r8
 83e:	01 c0       	rjmp	.+2      	; 0x842 <vfprintf+0x2d6>
 840:	b9 2c       	mov	r11, r9
 842:	a4 fe       	sbrs	r10, 4
 844:	0f c0       	rjmp	.+30     	; 0x864 <vfprintf+0x2f8>
 846:	fe 01       	movw	r30, r28
 848:	e8 0d       	add	r30, r8
 84a:	f1 1d       	adc	r31, r1
 84c:	80 81       	ld	r24, Z
 84e:	80 33       	cpi	r24, 0x30	; 48
 850:	21 f4       	brne	.+8      	; 0x85a <vfprintf+0x2ee>
 852:	9a 2d       	mov	r25, r10
 854:	99 7e       	andi	r25, 0xE9	; 233
 856:	a9 2e       	mov	r10, r25
 858:	09 c0       	rjmp	.+18     	; 0x86c <vfprintf+0x300>
 85a:	a2 fe       	sbrs	r10, 2
 85c:	06 c0       	rjmp	.+12     	; 0x86a <vfprintf+0x2fe>
 85e:	b3 94       	inc	r11
 860:	b3 94       	inc	r11
 862:	04 c0       	rjmp	.+8      	; 0x86c <vfprintf+0x300>
 864:	8a 2d       	mov	r24, r10
 866:	86 78       	andi	r24, 0x86	; 134
 868:	09 f0       	breq	.+2      	; 0x86c <vfprintf+0x300>
 86a:	b3 94       	inc	r11
 86c:	a3 fc       	sbrc	r10, 3
 86e:	11 c0       	rjmp	.+34     	; 0x892 <vfprintf+0x326>
 870:	a0 fe       	sbrs	r10, 0
 872:	06 c0       	rjmp	.+12     	; 0x880 <vfprintf+0x314>
 874:	b2 14       	cp	r11, r2
 876:	88 f4       	brcc	.+34     	; 0x89a <vfprintf+0x32e>
 878:	28 0c       	add	r2, r8
 87a:	92 2c       	mov	r9, r2
 87c:	9b 18       	sub	r9, r11
 87e:	0e c0       	rjmp	.+28     	; 0x89c <vfprintf+0x330>
 880:	b2 14       	cp	r11, r2
 882:	60 f4       	brcc	.+24     	; 0x89c <vfprintf+0x330>
 884:	b6 01       	movw	r22, r12
 886:	80 e2       	ldi	r24, 0x20	; 32
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 88e:	b3 94       	inc	r11
 890:	f7 cf       	rjmp	.-18     	; 0x880 <vfprintf+0x314>
 892:	b2 14       	cp	r11, r2
 894:	18 f4       	brcc	.+6      	; 0x89c <vfprintf+0x330>
 896:	2b 18       	sub	r2, r11
 898:	02 c0       	rjmp	.+4      	; 0x89e <vfprintf+0x332>
 89a:	98 2c       	mov	r9, r8
 89c:	21 2c       	mov	r2, r1
 89e:	a4 fe       	sbrs	r10, 4
 8a0:	10 c0       	rjmp	.+32     	; 0x8c2 <vfprintf+0x356>
 8a2:	b6 01       	movw	r22, r12
 8a4:	80 e3       	ldi	r24, 0x30	; 48
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 8ac:	a2 fe       	sbrs	r10, 2
 8ae:	17 c0       	rjmp	.+46     	; 0x8de <vfprintf+0x372>
 8b0:	a1 fc       	sbrc	r10, 1
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <vfprintf+0x34e>
 8b4:	88 e7       	ldi	r24, 0x78	; 120
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <vfprintf+0x352>
 8ba:	88 e5       	ldi	r24, 0x58	; 88
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	b6 01       	movw	r22, r12
 8c0:	0c c0       	rjmp	.+24     	; 0x8da <vfprintf+0x36e>
 8c2:	8a 2d       	mov	r24, r10
 8c4:	86 78       	andi	r24, 0x86	; 134
 8c6:	59 f0       	breq	.+22     	; 0x8de <vfprintf+0x372>
 8c8:	a1 fe       	sbrs	r10, 1
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <vfprintf+0x364>
 8cc:	8b e2       	ldi	r24, 0x2B	; 43
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <vfprintf+0x366>
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	a7 fc       	sbrc	r10, 7
 8d4:	8d e2       	ldi	r24, 0x2D	; 45
 8d6:	b6 01       	movw	r22, r12
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 8de:	89 14       	cp	r8, r9
 8e0:	38 f4       	brcc	.+14     	; 0x8f0 <vfprintf+0x384>
 8e2:	b6 01       	movw	r22, r12
 8e4:	80 e3       	ldi	r24, 0x30	; 48
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 8ec:	9a 94       	dec	r9
 8ee:	f7 cf       	rjmp	.-18     	; 0x8de <vfprintf+0x372>
 8f0:	8a 94       	dec	r8
 8f2:	f3 01       	movw	r30, r6
 8f4:	e8 0d       	add	r30, r8
 8f6:	f1 1d       	adc	r31, r1
 8f8:	80 81       	ld	r24, Z
 8fa:	b6 01       	movw	r22, r12
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 902:	81 10       	cpse	r8, r1
 904:	f5 cf       	rjmp	.-22     	; 0x8f0 <vfprintf+0x384>
 906:	22 20       	and	r2, r2
 908:	09 f4       	brne	.+2      	; 0x90c <vfprintf+0x3a0>
 90a:	42 ce       	rjmp	.-892    	; 0x590 <vfprintf+0x24>
 90c:	b6 01       	movw	r22, r12
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <fputc>
 916:	2a 94       	dec	r2
 918:	f6 cf       	rjmp	.-20     	; 0x906 <vfprintf+0x39a>
 91a:	f6 01       	movw	r30, r12
 91c:	86 81       	ldd	r24, Z+6	; 0x06
 91e:	97 81       	ldd	r25, Z+7	; 0x07
 920:	02 c0       	rjmp	.+4      	; 0x926 <vfprintf+0x3ba>
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	9f ef       	ldi	r25, 0xFF	; 255
 926:	2b 96       	adiw	r28, 0x0b	; 11
 928:	e2 e1       	ldi	r30, 0x12	; 18
 92a:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__epilogue_restores__>

0000092e <calloc>:
 92e:	0f 93       	push	r16
 930:	1f 93       	push	r17
 932:	cf 93       	push	r28
 934:	df 93       	push	r29
 936:	86 9f       	mul	r24, r22
 938:	80 01       	movw	r16, r0
 93a:	87 9f       	mul	r24, r23
 93c:	10 0d       	add	r17, r0
 93e:	96 9f       	mul	r25, r22
 940:	10 0d       	add	r17, r0
 942:	11 24       	eor	r1, r1
 944:	c8 01       	movw	r24, r16
 946:	0e 94 b3 04 	call	0x966	; 0x966 <malloc>
 94a:	ec 01       	movw	r28, r24
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	29 f0       	breq	.+10     	; 0x95a <calloc+0x2c>
 950:	a8 01       	movw	r20, r16
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	0e 94 df 05 	call	0xbbe	; 0xbbe <memset>
 95a:	ce 01       	movw	r24, r28
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	1f 91       	pop	r17
 962:	0f 91       	pop	r16
 964:	08 95       	ret

00000966 <malloc>:
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	82 30       	cpi	r24, 0x02	; 2
 970:	91 05       	cpc	r25, r1
 972:	10 f4       	brcc	.+4      	; 0x978 <malloc+0x12>
 974:	82 e0       	ldi	r24, 0x02	; 2
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <__flp>
 97c:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <__flp+0x1>
 980:	20 e0       	ldi	r18, 0x00	; 0
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	a0 e0       	ldi	r26, 0x00	; 0
 986:	b0 e0       	ldi	r27, 0x00	; 0
 988:	30 97       	sbiw	r30, 0x00	; 0
 98a:	19 f1       	breq	.+70     	; 0x9d2 <malloc+0x6c>
 98c:	40 81       	ld	r20, Z
 98e:	51 81       	ldd	r21, Z+1	; 0x01
 990:	02 81       	ldd	r16, Z+2	; 0x02
 992:	13 81       	ldd	r17, Z+3	; 0x03
 994:	48 17       	cp	r20, r24
 996:	59 07       	cpc	r21, r25
 998:	c8 f0       	brcs	.+50     	; 0x9cc <malloc+0x66>
 99a:	84 17       	cp	r24, r20
 99c:	95 07       	cpc	r25, r21
 99e:	69 f4       	brne	.+26     	; 0x9ba <malloc+0x54>
 9a0:	10 97       	sbiw	r26, 0x00	; 0
 9a2:	31 f0       	breq	.+12     	; 0x9b0 <malloc+0x4a>
 9a4:	12 96       	adiw	r26, 0x02	; 2
 9a6:	0c 93       	st	X, r16
 9a8:	12 97       	sbiw	r26, 0x02	; 2
 9aa:	13 96       	adiw	r26, 0x03	; 3
 9ac:	1c 93       	st	X, r17
 9ae:	27 c0       	rjmp	.+78     	; 0x9fe <malloc+0x98>
 9b0:	00 93 a1 02 	sts	0x02A1, r16	; 0x8002a1 <__flp>
 9b4:	10 93 a2 02 	sts	0x02A2, r17	; 0x8002a2 <__flp+0x1>
 9b8:	22 c0       	rjmp	.+68     	; 0x9fe <malloc+0x98>
 9ba:	21 15       	cp	r18, r1
 9bc:	31 05       	cpc	r19, r1
 9be:	19 f0       	breq	.+6      	; 0x9c6 <malloc+0x60>
 9c0:	42 17       	cp	r20, r18
 9c2:	53 07       	cpc	r21, r19
 9c4:	18 f4       	brcc	.+6      	; 0x9cc <malloc+0x66>
 9c6:	9a 01       	movw	r18, r20
 9c8:	bd 01       	movw	r22, r26
 9ca:	ef 01       	movw	r28, r30
 9cc:	df 01       	movw	r26, r30
 9ce:	f8 01       	movw	r30, r16
 9d0:	db cf       	rjmp	.-74     	; 0x988 <malloc+0x22>
 9d2:	21 15       	cp	r18, r1
 9d4:	31 05       	cpc	r19, r1
 9d6:	f9 f0       	breq	.+62     	; 0xa16 <malloc+0xb0>
 9d8:	28 1b       	sub	r18, r24
 9da:	39 0b       	sbc	r19, r25
 9dc:	24 30       	cpi	r18, 0x04	; 4
 9de:	31 05       	cpc	r19, r1
 9e0:	80 f4       	brcc	.+32     	; 0xa02 <malloc+0x9c>
 9e2:	8a 81       	ldd	r24, Y+2	; 0x02
 9e4:	9b 81       	ldd	r25, Y+3	; 0x03
 9e6:	61 15       	cp	r22, r1
 9e8:	71 05       	cpc	r23, r1
 9ea:	21 f0       	breq	.+8      	; 0x9f4 <malloc+0x8e>
 9ec:	fb 01       	movw	r30, r22
 9ee:	93 83       	std	Z+3, r25	; 0x03
 9f0:	82 83       	std	Z+2, r24	; 0x02
 9f2:	04 c0       	rjmp	.+8      	; 0x9fc <malloc+0x96>
 9f4:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__flp+0x1>
 9f8:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <__flp>
 9fc:	fe 01       	movw	r30, r28
 9fe:	32 96       	adiw	r30, 0x02	; 2
 a00:	44 c0       	rjmp	.+136    	; 0xa8a <malloc+0x124>
 a02:	fe 01       	movw	r30, r28
 a04:	e2 0f       	add	r30, r18
 a06:	f3 1f       	adc	r31, r19
 a08:	81 93       	st	Z+, r24
 a0a:	91 93       	st	Z+, r25
 a0c:	22 50       	subi	r18, 0x02	; 2
 a0e:	31 09       	sbc	r19, r1
 a10:	39 83       	std	Y+1, r19	; 0x01
 a12:	28 83       	st	Y, r18
 a14:	3a c0       	rjmp	.+116    	; 0xa8a <malloc+0x124>
 a16:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
 a1a:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
 a1e:	23 2b       	or	r18, r19
 a20:	41 f4       	brne	.+16     	; 0xa32 <malloc+0xcc>
 a22:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a26:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a2a:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <__brkval+0x1>
 a2e:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <__brkval>
 a32:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a36:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a3a:	21 15       	cp	r18, r1
 a3c:	31 05       	cpc	r19, r1
 a3e:	41 f4       	brne	.+16     	; 0xa50 <malloc+0xea>
 a40:	2d b7       	in	r18, 0x3d	; 61
 a42:	3e b7       	in	r19, 0x3e	; 62
 a44:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a48:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a4c:	24 1b       	sub	r18, r20
 a4e:	35 0b       	sbc	r19, r21
 a50:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__brkval>
 a54:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <__brkval+0x1>
 a58:	e2 17       	cp	r30, r18
 a5a:	f3 07       	cpc	r31, r19
 a5c:	a0 f4       	brcc	.+40     	; 0xa86 <malloc+0x120>
 a5e:	2e 1b       	sub	r18, r30
 a60:	3f 0b       	sbc	r19, r31
 a62:	28 17       	cp	r18, r24
 a64:	39 07       	cpc	r19, r25
 a66:	78 f0       	brcs	.+30     	; 0xa86 <malloc+0x120>
 a68:	ac 01       	movw	r20, r24
 a6a:	4e 5f       	subi	r20, 0xFE	; 254
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255
 a6e:	24 17       	cp	r18, r20
 a70:	35 07       	cpc	r19, r21
 a72:	48 f0       	brcs	.+18     	; 0xa86 <malloc+0x120>
 a74:	4e 0f       	add	r20, r30
 a76:	5f 1f       	adc	r21, r31
 a78:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <__brkval+0x1>
 a7c:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <__brkval>
 a80:	81 93       	st	Z+, r24
 a82:	91 93       	st	Z+, r25
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <malloc+0x124>
 a86:	e0 e0       	ldi	r30, 0x00	; 0
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	cf 01       	movw	r24, r30
 a8c:	df 91       	pop	r29
 a8e:	cf 91       	pop	r28
 a90:	1f 91       	pop	r17
 a92:	0f 91       	pop	r16
 a94:	08 95       	ret

00000a96 <free>:
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	00 97       	sbiw	r24, 0x00	; 0
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <free+0xa>
 a9e:	81 c0       	rjmp	.+258    	; 0xba2 <free+0x10c>
 aa0:	fc 01       	movw	r30, r24
 aa2:	32 97       	sbiw	r30, 0x02	; 2
 aa4:	13 82       	std	Z+3, r1	; 0x03
 aa6:	12 82       	std	Z+2, r1	; 0x02
 aa8:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <__flp>
 aac:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <__flp+0x1>
 ab0:	10 97       	sbiw	r26, 0x00	; 0
 ab2:	81 f4       	brne	.+32     	; 0xad4 <free+0x3e>
 ab4:	20 81       	ld	r18, Z
 ab6:	31 81       	ldd	r19, Z+1	; 0x01
 ab8:	82 0f       	add	r24, r18
 aba:	93 1f       	adc	r25, r19
 abc:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
 ac0:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
 ac4:	28 17       	cp	r18, r24
 ac6:	39 07       	cpc	r19, r25
 ac8:	51 f5       	brne	.+84     	; 0xb1e <free+0x88>
 aca:	f0 93 a0 02 	sts	0x02A0, r31	; 0x8002a0 <__brkval+0x1>
 ace:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <__brkval>
 ad2:	67 c0       	rjmp	.+206    	; 0xba2 <free+0x10c>
 ad4:	ed 01       	movw	r28, r26
 ad6:	20 e0       	ldi	r18, 0x00	; 0
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	ce 17       	cp	r28, r30
 adc:	df 07       	cpc	r29, r31
 ade:	40 f4       	brcc	.+16     	; 0xaf0 <free+0x5a>
 ae0:	4a 81       	ldd	r20, Y+2	; 0x02
 ae2:	5b 81       	ldd	r21, Y+3	; 0x03
 ae4:	9e 01       	movw	r18, r28
 ae6:	41 15       	cp	r20, r1
 ae8:	51 05       	cpc	r21, r1
 aea:	f1 f0       	breq	.+60     	; 0xb28 <free+0x92>
 aec:	ea 01       	movw	r28, r20
 aee:	f5 cf       	rjmp	.-22     	; 0xada <free+0x44>
 af0:	d3 83       	std	Z+3, r29	; 0x03
 af2:	c2 83       	std	Z+2, r28	; 0x02
 af4:	40 81       	ld	r20, Z
 af6:	51 81       	ldd	r21, Z+1	; 0x01
 af8:	84 0f       	add	r24, r20
 afa:	95 1f       	adc	r25, r21
 afc:	c8 17       	cp	r28, r24
 afe:	d9 07       	cpc	r29, r25
 b00:	59 f4       	brne	.+22     	; 0xb18 <free+0x82>
 b02:	88 81       	ld	r24, Y
 b04:	99 81       	ldd	r25, Y+1	; 0x01
 b06:	84 0f       	add	r24, r20
 b08:	95 1f       	adc	r25, r21
 b0a:	02 96       	adiw	r24, 0x02	; 2
 b0c:	91 83       	std	Z+1, r25	; 0x01
 b0e:	80 83       	st	Z, r24
 b10:	8a 81       	ldd	r24, Y+2	; 0x02
 b12:	9b 81       	ldd	r25, Y+3	; 0x03
 b14:	93 83       	std	Z+3, r25	; 0x03
 b16:	82 83       	std	Z+2, r24	; 0x02
 b18:	21 15       	cp	r18, r1
 b1a:	31 05       	cpc	r19, r1
 b1c:	29 f4       	brne	.+10     	; 0xb28 <free+0x92>
 b1e:	f0 93 a2 02 	sts	0x02A2, r31	; 0x8002a2 <__flp+0x1>
 b22:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <__flp>
 b26:	3d c0       	rjmp	.+122    	; 0xba2 <free+0x10c>
 b28:	e9 01       	movw	r28, r18
 b2a:	fb 83       	std	Y+3, r31	; 0x03
 b2c:	ea 83       	std	Y+2, r30	; 0x02
 b2e:	49 91       	ld	r20, Y+
 b30:	59 91       	ld	r21, Y+
 b32:	c4 0f       	add	r28, r20
 b34:	d5 1f       	adc	r29, r21
 b36:	ec 17       	cp	r30, r28
 b38:	fd 07       	cpc	r31, r29
 b3a:	61 f4       	brne	.+24     	; 0xb54 <free+0xbe>
 b3c:	80 81       	ld	r24, Z
 b3e:	91 81       	ldd	r25, Z+1	; 0x01
 b40:	84 0f       	add	r24, r20
 b42:	95 1f       	adc	r25, r21
 b44:	02 96       	adiw	r24, 0x02	; 2
 b46:	e9 01       	movw	r28, r18
 b48:	99 83       	std	Y+1, r25	; 0x01
 b4a:	88 83       	st	Y, r24
 b4c:	82 81       	ldd	r24, Z+2	; 0x02
 b4e:	93 81       	ldd	r25, Z+3	; 0x03
 b50:	9b 83       	std	Y+3, r25	; 0x03
 b52:	8a 83       	std	Y+2, r24	; 0x02
 b54:	e0 e0       	ldi	r30, 0x00	; 0
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	12 96       	adiw	r26, 0x02	; 2
 b5a:	8d 91       	ld	r24, X+
 b5c:	9c 91       	ld	r25, X
 b5e:	13 97       	sbiw	r26, 0x03	; 3
 b60:	00 97       	sbiw	r24, 0x00	; 0
 b62:	19 f0       	breq	.+6      	; 0xb6a <free+0xd4>
 b64:	fd 01       	movw	r30, r26
 b66:	dc 01       	movw	r26, r24
 b68:	f7 cf       	rjmp	.-18     	; 0xb58 <free+0xc2>
 b6a:	8d 91       	ld	r24, X+
 b6c:	9c 91       	ld	r25, X
 b6e:	11 97       	sbiw	r26, 0x01	; 1
 b70:	9d 01       	movw	r18, r26
 b72:	2e 5f       	subi	r18, 0xFE	; 254
 b74:	3f 4f       	sbci	r19, 0xFF	; 255
 b76:	82 0f       	add	r24, r18
 b78:	93 1f       	adc	r25, r19
 b7a:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
 b7e:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
 b82:	28 17       	cp	r18, r24
 b84:	39 07       	cpc	r19, r25
 b86:	69 f4       	brne	.+26     	; 0xba2 <free+0x10c>
 b88:	30 97       	sbiw	r30, 0x00	; 0
 b8a:	29 f4       	brne	.+10     	; 0xb96 <free+0x100>
 b8c:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__flp+0x1>
 b90:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <__flp>
 b94:	02 c0       	rjmp	.+4      	; 0xb9a <free+0x104>
 b96:	13 82       	std	Z+3, r1	; 0x03
 b98:	12 82       	std	Z+2, r1	; 0x02
 b9a:	b0 93 a0 02 	sts	0x02A0, r27	; 0x8002a0 <__brkval+0x1>
 b9e:	a0 93 9f 02 	sts	0x029F, r26	; 0x80029f <__brkval>
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	08 95       	ret

00000ba8 <strnlen_P>:
 ba8:	fc 01       	movw	r30, r24
 baa:	05 90       	lpm	r0, Z+
 bac:	61 50       	subi	r22, 0x01	; 1
 bae:	70 40       	sbci	r23, 0x00	; 0
 bb0:	01 10       	cpse	r0, r1
 bb2:	d8 f7       	brcc	.-10     	; 0xbaa <strnlen_P+0x2>
 bb4:	80 95       	com	r24
 bb6:	90 95       	com	r25
 bb8:	8e 0f       	add	r24, r30
 bba:	9f 1f       	adc	r25, r31
 bbc:	08 95       	ret

00000bbe <memset>:
 bbe:	dc 01       	movw	r26, r24
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <memset+0x6>
 bc2:	6d 93       	st	X+, r22
 bc4:	41 50       	subi	r20, 0x01	; 1
 bc6:	50 40       	sbci	r21, 0x00	; 0
 bc8:	e0 f7       	brcc	.-8      	; 0xbc2 <memset+0x4>
 bca:	08 95       	ret

00000bcc <strnlen>:
 bcc:	fc 01       	movw	r30, r24
 bce:	61 50       	subi	r22, 0x01	; 1
 bd0:	70 40       	sbci	r23, 0x00	; 0
 bd2:	01 90       	ld	r0, Z+
 bd4:	01 10       	cpse	r0, r1
 bd6:	d8 f7       	brcc	.-10     	; 0xbce <strnlen+0x2>
 bd8:	80 95       	com	r24
 bda:	90 95       	com	r25
 bdc:	8e 0f       	add	r24, r30
 bde:	9f 1f       	adc	r25, r31
 be0:	08 95       	ret

00000be2 <fputc>:
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	fb 01       	movw	r30, r22
 bec:	23 81       	ldd	r18, Z+3	; 0x03
 bee:	21 fd       	sbrc	r18, 1
 bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <fputc+0x16>
 bf2:	8f ef       	ldi	r24, 0xFF	; 255
 bf4:	9f ef       	ldi	r25, 0xFF	; 255
 bf6:	2c c0       	rjmp	.+88     	; 0xc50 <fputc+0x6e>
 bf8:	22 ff       	sbrs	r18, 2
 bfa:	16 c0       	rjmp	.+44     	; 0xc28 <fputc+0x46>
 bfc:	46 81       	ldd	r20, Z+6	; 0x06
 bfe:	57 81       	ldd	r21, Z+7	; 0x07
 c00:	24 81       	ldd	r18, Z+4	; 0x04
 c02:	35 81       	ldd	r19, Z+5	; 0x05
 c04:	42 17       	cp	r20, r18
 c06:	53 07       	cpc	r21, r19
 c08:	44 f4       	brge	.+16     	; 0xc1a <fputc+0x38>
 c0a:	a0 81       	ld	r26, Z
 c0c:	b1 81       	ldd	r27, Z+1	; 0x01
 c0e:	9d 01       	movw	r18, r26
 c10:	2f 5f       	subi	r18, 0xFF	; 255
 c12:	3f 4f       	sbci	r19, 0xFF	; 255
 c14:	31 83       	std	Z+1, r19	; 0x01
 c16:	20 83       	st	Z, r18
 c18:	8c 93       	st	X, r24
 c1a:	26 81       	ldd	r18, Z+6	; 0x06
 c1c:	37 81       	ldd	r19, Z+7	; 0x07
 c1e:	2f 5f       	subi	r18, 0xFF	; 255
 c20:	3f 4f       	sbci	r19, 0xFF	; 255
 c22:	37 83       	std	Z+7, r19	; 0x07
 c24:	26 83       	std	Z+6, r18	; 0x06
 c26:	14 c0       	rjmp	.+40     	; 0xc50 <fputc+0x6e>
 c28:	8b 01       	movw	r16, r22
 c2a:	ec 01       	movw	r28, r24
 c2c:	fb 01       	movw	r30, r22
 c2e:	00 84       	ldd	r0, Z+8	; 0x08
 c30:	f1 85       	ldd	r31, Z+9	; 0x09
 c32:	e0 2d       	mov	r30, r0
 c34:	09 95       	icall
 c36:	89 2b       	or	r24, r25
 c38:	e1 f6       	brne	.-72     	; 0xbf2 <fputc+0x10>
 c3a:	d8 01       	movw	r26, r16
 c3c:	16 96       	adiw	r26, 0x06	; 6
 c3e:	8d 91       	ld	r24, X+
 c40:	9c 91       	ld	r25, X
 c42:	17 97       	sbiw	r26, 0x07	; 7
 c44:	01 96       	adiw	r24, 0x01	; 1
 c46:	17 96       	adiw	r26, 0x07	; 7
 c48:	9c 93       	st	X, r25
 c4a:	8e 93       	st	-X, r24
 c4c:	16 97       	sbiw	r26, 0x06	; 6
 c4e:	ce 01       	movw	r24, r28
 c50:	df 91       	pop	r29
 c52:	cf 91       	pop	r28
 c54:	1f 91       	pop	r17
 c56:	0f 91       	pop	r16
 c58:	08 95       	ret

00000c5a <__ultoa_invert>:
 c5a:	fa 01       	movw	r30, r20
 c5c:	aa 27       	eor	r26, r26
 c5e:	28 30       	cpi	r18, 0x08	; 8
 c60:	51 f1       	breq	.+84     	; 0xcb6 <__ultoa_invert+0x5c>
 c62:	20 31       	cpi	r18, 0x10	; 16
 c64:	81 f1       	breq	.+96     	; 0xcc6 <__ultoa_invert+0x6c>
 c66:	e8 94       	clt
 c68:	6f 93       	push	r22
 c6a:	6e 7f       	andi	r22, 0xFE	; 254
 c6c:	6e 5f       	subi	r22, 0xFE	; 254
 c6e:	7f 4f       	sbci	r23, 0xFF	; 255
 c70:	8f 4f       	sbci	r24, 0xFF	; 255
 c72:	9f 4f       	sbci	r25, 0xFF	; 255
 c74:	af 4f       	sbci	r26, 0xFF	; 255
 c76:	b1 e0       	ldi	r27, 0x01	; 1
 c78:	3e d0       	rcall	.+124    	; 0xcf6 <__ultoa_invert+0x9c>
 c7a:	b4 e0       	ldi	r27, 0x04	; 4
 c7c:	3c d0       	rcall	.+120    	; 0xcf6 <__ultoa_invert+0x9c>
 c7e:	67 0f       	add	r22, r23
 c80:	78 1f       	adc	r23, r24
 c82:	89 1f       	adc	r24, r25
 c84:	9a 1f       	adc	r25, r26
 c86:	a1 1d       	adc	r26, r1
 c88:	68 0f       	add	r22, r24
 c8a:	79 1f       	adc	r23, r25
 c8c:	8a 1f       	adc	r24, r26
 c8e:	91 1d       	adc	r25, r1
 c90:	a1 1d       	adc	r26, r1
 c92:	6a 0f       	add	r22, r26
 c94:	71 1d       	adc	r23, r1
 c96:	81 1d       	adc	r24, r1
 c98:	91 1d       	adc	r25, r1
 c9a:	a1 1d       	adc	r26, r1
 c9c:	20 d0       	rcall	.+64     	; 0xcde <__ultoa_invert+0x84>
 c9e:	09 f4       	brne	.+2      	; 0xca2 <__ultoa_invert+0x48>
 ca0:	68 94       	set
 ca2:	3f 91       	pop	r19
 ca4:	2a e0       	ldi	r18, 0x0A	; 10
 ca6:	26 9f       	mul	r18, r22
 ca8:	11 24       	eor	r1, r1
 caa:	30 19       	sub	r19, r0
 cac:	30 5d       	subi	r19, 0xD0	; 208
 cae:	31 93       	st	Z+, r19
 cb0:	de f6       	brtc	.-74     	; 0xc68 <__ultoa_invert+0xe>
 cb2:	cf 01       	movw	r24, r30
 cb4:	08 95       	ret
 cb6:	46 2f       	mov	r20, r22
 cb8:	47 70       	andi	r20, 0x07	; 7
 cba:	40 5d       	subi	r20, 0xD0	; 208
 cbc:	41 93       	st	Z+, r20
 cbe:	b3 e0       	ldi	r27, 0x03	; 3
 cc0:	0f d0       	rcall	.+30     	; 0xce0 <__ultoa_invert+0x86>
 cc2:	c9 f7       	brne	.-14     	; 0xcb6 <__ultoa_invert+0x5c>
 cc4:	f6 cf       	rjmp	.-20     	; 0xcb2 <__ultoa_invert+0x58>
 cc6:	46 2f       	mov	r20, r22
 cc8:	4f 70       	andi	r20, 0x0F	; 15
 cca:	40 5d       	subi	r20, 0xD0	; 208
 ccc:	4a 33       	cpi	r20, 0x3A	; 58
 cce:	18 f0       	brcs	.+6      	; 0xcd6 <__ultoa_invert+0x7c>
 cd0:	49 5d       	subi	r20, 0xD9	; 217
 cd2:	31 fd       	sbrc	r19, 1
 cd4:	40 52       	subi	r20, 0x20	; 32
 cd6:	41 93       	st	Z+, r20
 cd8:	02 d0       	rcall	.+4      	; 0xcde <__ultoa_invert+0x84>
 cda:	a9 f7       	brne	.-22     	; 0xcc6 <__ultoa_invert+0x6c>
 cdc:	ea cf       	rjmp	.-44     	; 0xcb2 <__ultoa_invert+0x58>
 cde:	b4 e0       	ldi	r27, 0x04	; 4
 ce0:	a6 95       	lsr	r26
 ce2:	97 95       	ror	r25
 ce4:	87 95       	ror	r24
 ce6:	77 95       	ror	r23
 ce8:	67 95       	ror	r22
 cea:	ba 95       	dec	r27
 cec:	c9 f7       	brne	.-14     	; 0xce0 <__ultoa_invert+0x86>
 cee:	00 97       	sbiw	r24, 0x00	; 0
 cf0:	61 05       	cpc	r22, r1
 cf2:	71 05       	cpc	r23, r1
 cf4:	08 95       	ret
 cf6:	9b 01       	movw	r18, r22
 cf8:	ac 01       	movw	r20, r24
 cfa:	0a 2e       	mov	r0, r26
 cfc:	06 94       	lsr	r0
 cfe:	57 95       	ror	r21
 d00:	47 95       	ror	r20
 d02:	37 95       	ror	r19
 d04:	27 95       	ror	r18
 d06:	ba 95       	dec	r27
 d08:	c9 f7       	brne	.-14     	; 0xcfc <__ultoa_invert+0xa2>
 d0a:	62 0f       	add	r22, r18
 d0c:	73 1f       	adc	r23, r19
 d0e:	84 1f       	adc	r24, r20
 d10:	95 1f       	adc	r25, r21
 d12:	a0 1d       	adc	r26, r0
 d14:	08 95       	ret

00000d16 <__prologue_saves__>:
 d16:	2f 92       	push	r2
 d18:	3f 92       	push	r3
 d1a:	4f 92       	push	r4
 d1c:	5f 92       	push	r5
 d1e:	6f 92       	push	r6
 d20:	7f 92       	push	r7
 d22:	8f 92       	push	r8
 d24:	9f 92       	push	r9
 d26:	af 92       	push	r10
 d28:	bf 92       	push	r11
 d2a:	cf 92       	push	r12
 d2c:	df 92       	push	r13
 d2e:	ef 92       	push	r14
 d30:	ff 92       	push	r15
 d32:	0f 93       	push	r16
 d34:	1f 93       	push	r17
 d36:	cf 93       	push	r28
 d38:	df 93       	push	r29
 d3a:	cd b7       	in	r28, 0x3d	; 61
 d3c:	de b7       	in	r29, 0x3e	; 62
 d3e:	ca 1b       	sub	r28, r26
 d40:	db 0b       	sbc	r29, r27
 d42:	0f b6       	in	r0, 0x3f	; 63
 d44:	f8 94       	cli
 d46:	de bf       	out	0x3e, r29	; 62
 d48:	0f be       	out	0x3f, r0	; 63
 d4a:	cd bf       	out	0x3d, r28	; 61
 d4c:	09 94       	ijmp

00000d4e <__epilogue_restores__>:
 d4e:	2a 88       	ldd	r2, Y+18	; 0x12
 d50:	39 88       	ldd	r3, Y+17	; 0x11
 d52:	48 88       	ldd	r4, Y+16	; 0x10
 d54:	5f 84       	ldd	r5, Y+15	; 0x0f
 d56:	6e 84       	ldd	r6, Y+14	; 0x0e
 d58:	7d 84       	ldd	r7, Y+13	; 0x0d
 d5a:	8c 84       	ldd	r8, Y+12	; 0x0c
 d5c:	9b 84       	ldd	r9, Y+11	; 0x0b
 d5e:	aa 84       	ldd	r10, Y+10	; 0x0a
 d60:	b9 84       	ldd	r11, Y+9	; 0x09
 d62:	c8 84       	ldd	r12, Y+8	; 0x08
 d64:	df 80       	ldd	r13, Y+7	; 0x07
 d66:	ee 80       	ldd	r14, Y+6	; 0x06
 d68:	fd 80       	ldd	r15, Y+5	; 0x05
 d6a:	0c 81       	ldd	r16, Y+4	; 0x04
 d6c:	1b 81       	ldd	r17, Y+3	; 0x03
 d6e:	aa 81       	ldd	r26, Y+2	; 0x02
 d70:	b9 81       	ldd	r27, Y+1	; 0x01
 d72:	ce 0f       	add	r28, r30
 d74:	d1 1d       	adc	r29, r1
 d76:	0f b6       	in	r0, 0x3f	; 63
 d78:	f8 94       	cli
 d7a:	de bf       	out	0x3e, r29	; 62
 d7c:	0f be       	out	0x3f, r0	; 63
 d7e:	cd bf       	out	0x3d, r28	; 61
 d80:	ed 01       	movw	r28, r26
 d82:	08 95       	ret

00000d84 <_exit>:
 d84:	f8 94       	cli

00000d86 <__stop_program>:
 d86:	ff cf       	rjmp	.-2      	; 0xd86 <__stop_program>
